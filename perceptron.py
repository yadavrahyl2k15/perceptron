# -*- coding: utf-8 -*-
"""Perceptron.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DgZY6Y8vcsHKPthnYlrDLg0yr7ZI-029
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

class perceptron:
  def __init__(self,eta,epochs,activationfunction):
    self.weights=np.random.randn(3)*1e-4
    self.eta=eta
    self.epochs=epochs
    self.activationfunction=activationfunction

  def fit(self,x,y):
    self.x=x
    self.y=y

    x_with_bias=np.c_[self.x,-np.ones((len(self.x),1))]
    print(f"x_with_bias:{x_with_bias}")

    for epoch in range(self.epochs):
      print(f"epoch:{epoch}")
      y_hat=self.activationfunction(x_with_bias,self.weights)
      print(f"y_hat:{y_hat}")
      error=self.y-y_hat
      print(f"error:{error}")
      self.weights=self.weights+self.eta*np.dot(x_with_bias.T,error)
      print(f"updated weights:{self.weights}")
      print("###################")

  def predict(self,x):
    x_with_bias=np.c_[x,-np.ones((len(self.x),1))]
    return self.activationfunction(x_with_bias,self.weights)

activationfunction=lambda inputs,weights:np.where(np.dot(inputs,weights)>0,1,0)

#AND

data={"x1":[0,0,1,1],
      "x2":[0,1,0,1],
      "y":[0,0,0,1]}

data=pd.DataFrame(data)
data

x=data.drop("y",axis=1)
y=data["y"]

x

y.to_frame()
y

model=perceptron(eta=0.1,epochs=10,activationfunction=activationfunction)

model.fit(x,y)

model.predict(x)

data.plot(kind="scatter",x="x1",y="x2",c="y",s=50,cmap="winter")
plt.axhline(y=0,color="black",linestyle="--",linewidth=2)
plt.axvline(x=0,color="black",linestyle="--",linewidth=2)

plt.plot(np.linspace(0,1.4),1.5-1*np.linspace(0,1.4),"r--")

#OR

data={"x1":[0,0,1,1],
      "x2":[0,1,0,1],
      "y":[0,1,1,1]}

data=pd.DataFrame(data)
data

x=data.drop("y",axis=1)
y=data["y"]

x

y.to_frame()

model=perceptron(eta=0.5,epochs=8,activationfunction=activationfunction)

model.fit(x,y)

model.predict(x)

